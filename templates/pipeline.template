AWSTemplateFormatVersion: 2010-09-09
Description: Creates Pipeline for TaskCat CI.
Parameters:
  GitHubUser:
    Description: Enter GitHub username of the repository owner
    Type: String
  GitHubRepoName:
    Description: Enter the repository name that should be monitored for changes
    Type: String
  SourceRepoBranch:
    Description: Enter the branch name to be monitored
    Type: String
  ArtifactBucket:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Description: S3 bucket name used to store build artifacts.
    Type: String
#  GitMergeLambda:
#    Description: Name of the GitMerge Lambda function
#    Type: String
  CodeStarConnectionArn:
    Description: CodeStar Connection ARN
    Type: String
  CodePipelineRoleArn:
    Description: Code Pipeline service role ARN
    Type: String
  CodeBuildRoleArn:
    Description: Code Build service role ARN
    Type: String
  StepFunctionsArn:
    Description: Step Functions service role ARN
    Type: String
Resources:
  CodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      RoleArn: !Ref CodePipelineRoleArn
      Stages:
        - Name: Source
          Actions:
            - Name: GitHub
              InputArtifacts: []
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: '1'
                Provider: CodeStarSourceConnection
              OutputArtifacts:
                - Name: Source
              Configuration:
                ConnectionArn: !Ref CodeStarConnectionArn
                FullRepositoryId: !Sub '${GitHubUser}/${GitHubRepoName}'
                BranchName: !Ref SourceRepoBranch
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: CodeBuild
              InputArtifacts:
                - Name: Source
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: '1'
                Provider: StepFunctions
              OutputArtifacts: []
              Configuration:
                StateMachineArn: !Ref CodeBuildStateMachine
              RunOrder: 2
#        - Name: Deploy
#          Actions:
#            - Name: Git-merge
#              ActionTypeId:
#                Category: Invoke
#                Owner: AWS
#                Version: '1'
#                Provider: Lambda
#              Configuration:
#                FunctionName: !Ref GitMergeLambda
#                UserParameters: 
#              RunOrder: 3
#  CodeBuild:
#    Type: 'AWS::CodeBuild::Project'
#    Properties:
#      Description: !Sub 'Submit build jobs for ${GitHubRepoName} as part of CI/CD pipeline'
#      ServiceRole: !Ref CodeBuildRoleArn
#      Artifacts:
#        Type: CODEPIPELINE
#      Environment:
#        Type: LINUX_CONTAINER
#        ComputeType: BUILD_GENERAL1_SMALL
#        Image: 'aws/codebuild/python:3.6.5'
#        EnvironmentVariables:
#          - Name: PROJECTNAME
#            Value: !Sub '${GitHubRepoName}'
#          - Name: GITHUBUSER
#            Value: !Sub '${GitHubUser}'
#          - Name: GITHUBTOKEN
#            Value: !Sub '${GitHubOAuthToken}'
#          - Name: SOURCEBRANCH
#            Value: !Sub '${SourceRepoBranch}'
#          - Name: ARTIFACT_BUCKET
#            Value: !Ref ArtifactBucket
#      Source:
#        Type: CODEPIPELINE
#        BuildSpec: |
#          version: 0.2
#
#          phases:
#            install:
#              commands:
#                - echo Entered the install phase...
#                - apt-get update -y
#                - sudo apt-get install zip gzip tar -y
#                - pip3 install --upgrade pip
#                - ln -s /usr/local/bin/pip /usr/bin/pip
#            pre_build:
#              commands:
#                - echo Entered the pre_build phase...
#                - echo Current directory is $CODEBUILD_SRC_DIR
#                - ls -la
#                - "export dirname=${!PWD##*/}"
#                - echo Directory name $dirname
#                - cd ..
#                - mv $dirname $PROJECTNAME
#                - ls -la
#                - cd $PROJECTNAME
#                - git config --global url."https://github.com/".insteadOf "git@github.com:"
#                - git init
#                - git remote add origin https://$GITHUBTOKEN@github.com/$GITHUBUSER/$PROJECTNAME.git
#                - git fetch
#                - git checkout -ft origin/$SOURCEBRANCH
#                - git submodule init
#                - git submodule update --recursive
#                - ls -lR
#                - cd ..
#                - echo Upgrading AWS CLI using pip3...
#                - pip install --upgrade awscli
#                - echo Installing Taskcat using pip3...
#                - pip install taskcat==0.9.23
#                - echo Verifying Taskcat installation...
#                - taskcat
#                - echo Configuring aws cli...
#                - aws configure set default.region us-west-2
#            build:
#              commands:
#                - echo Entered the build phase...
#                - cd $PROJECTNAME
#                - taskcat test run -l
#                - |
#                  if $(grep -Fq "CREATE_FAILED" taskcat_outputs/index.html)
#                  then
#                    echo Quickstart FAILED!
#                    exit 1
#                  else
#                    echo Quickstart Passed!
#                    exit 0
#                  fi
#              finally:
#                - ls -1 taskcat_outputs
#                - ls -1 taskcat_outputs | while read LOG; do cat taskcat_outputs/$LOG; done
#                - echo Zipping and uploading report to $ARTIFACT_BUCKET S3 bucket
#                - zip -r taskcat_report.zip taskcat_outputs
#                - aws s3 cp taskcat_report.zip s3://$ARTIFACT_BUCKET/taskcat_reports/$CODEBUILD_BUILD_ID.zip
  CFNLintProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Description: A CodeBuild Project that runs cfn-lint against cfn templates
      ServiceRole: !Ref CodeBuildRoleArn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
      SourceVersion: !Ref SourceRepoBranch
      Source:
        Auth: 
          Type: OAUTH
        Type: GITHUB
        Location: !Sub 'https://github.com/${GitHubUser}/${GitHubRepoName}.git'
        BuildSpec: cfnlintspec.yml
      TimeoutInMinutes: 10
  CFNGuardProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Description: A CodeBuild Project that runs cfn-guard against cfn templates
      ServiceRole: !Ref CodeBuildRoleArn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
      SourceVersion: !Ref SourceRepoBranch
      Source:
        Auth: 
          Type: OAUTH
        Type: GITHUB
        Location: !Sub 'https://github.com/${GitHubUser}/${GitHubRepoName}.git'
        BuildSpec: cfnguardspec.yml
      TimeoutInMinutes: 10
  StatesLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 7
  CodeBuildStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Ref StepFunctionsArn
      TracingConfiguration:
        Enabled: true
      LoggingConfiguration:
        Destinations: 
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StatesLogGroup.Arn
        IncludeExecutionData: true
        Level: ALL
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "An example of using CodeBuild to run tests, get test results and send a notification.",
              "StartAt": "Run Linting",
              "States": {
                "Run Linting": {
                  "Type": "Task",
                  "Resource": "arn:${AWS::Partition}:states:::codebuild:startBuild.sync",
                  "Parameters": {
                    "ProjectName": "${projectlint}"
                  },
                  "Next": "Run Compliance Check"
                },
                "Run Compliance Check": {
                  "Type": "Task",
                  "Resource": "arn:${AWS::Partition}:states:::codebuild:startBuild.sync",
                  "Parameters": {
                    "ProjectName": "${projectguard}"
                  },
                  "End": true
                }
              }
            }
          - {projectlint: !Ref CFNLintProject, projectguard: !Ref CFNGuardProject}
Outputs:
  CodePipelineName:
    Description: Pipeline  name
    Value: !Ref CodePipeline