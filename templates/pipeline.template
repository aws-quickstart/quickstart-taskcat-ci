AWSTemplateFormatVersion: 2010-09-09
Description: Creates Pipeline for TaskCat CI.
Parameters:
  GitHubUser:
    Description: Enter GitHub username of the repository owner
    Type: String
  GitHubRepoName:
    Description: Enter the repository name that should be monitored for changes
    Type: String
  SourceRepoBranch:
    Description: Enter the branch name to be monitored
    Type: String
    Default: main
  ArtifactBucket:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Description: S3 bucket name used to store build artifacts.
    Type: String
  CodeBuildRoleArn:
    Description: Code Build service role ARN
    Type: String
  StepFunctionsRoleArn:
    Description: Step Functions service role ARN
    Type: String
Resources:
  CodeBuild:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Description: !Sub 'Submit build jobs for ${GitHubRepoName} as part of CI/CD pipeline'
      ServiceRole: !Ref CodeBuildRoleArn
      Artifacts:
        Type: S3
        Location: !Sub '${ArtifactBucket}'
        Name: !Sub ${AWS::StackName}repo.zip
        Packaging: ZIP
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        EnvironmentVariables:
          - Name: ARTIFACT_BUCKET
            Value: !Ref ArtifactBucket
      Triggers:
        BuildType: BUILD
        Webhook: true
        FilterGroups:
          - - Type: EVENT
              Pattern: PUSH
      SourceVersion: !Ref SourceRepoBranch
      Source:
        Auth: 
          Type: OAUTH
        Type: GITHUB
        Location: !Sub 'https://github.com/${GitHubUser}/${GitHubRepoName}.git'
        BuildSpec: !Sub | 
          version: 0.2
          phases:
            install:
              commands:
                # - "yum install util-linux" These packages already exist in CodeBuild container
                - "curl -sL https://github.com/bronze1man/yaml2json/releases/download/v1.3/yaml2json_linux_amd64 > yaml2json"
                - "chmod +x yaml2json"
                - "(echo 'CodeBuildTriggerMetadata:' && env |grep CODEBUILD|sed 's/^/    /g;s/=/: \"/; s/$/\"/g') >> .pipeline.yaml"
                # TODO: Change this to actual quickstart location. Use parameter to trigger whether this will overwrite an existing file
                - "curl -sL https://github.com/elerch/quickstart-taskcat-ci/raw/iaccompliance/assets/.cfnguardspec.yaml > .cfnguardspec.yaml"
            build:
              commands:
                - "echo Entered the build phase..."
                - "START_TIME=$(date +%s)"
                - "HEX_TIME=$(printf '%x\\n' $START_TIME)"
                - "GUID=$(uuidgen -r |tr -d -)"
                - 'TRACE_ID="1-$HEX_TIME-$GUID"'
                - 'aws stepfunctions start-execution --state-machine-arn ${CodeBuildStateMachine} --input "$(./yaml2json <.pipeline.yaml)" --trace-header $TRACE_ID'
          artifacts:
            files:
              - '**/*'
  CFNProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Description: A CodeBuild Project that runs cfn-lint,cfn-guard or CDK Commands
      ServiceRole: !Ref CodeBuildRoleArn
      Artifacts:
        Type: S3
        Location: !Sub '${ArtifactBucket}'
        Name: !Sub ${AWS::StackName}repo.zip
        Packaging: ZIP
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
      Source:
        Type: S3
        Location: !Sub '${ArtifactBucket}/${AWS::StackName}repo.zip'
        BuildSpec: | 
          version: 0.2

          env:
            variables:
              templateloc: "./infra"
          phases:
            install:
              commands:
                - echo Installing cfn-lint using pip3...
                - pip3 install cfn-lint
                - curl -sL https://github.com/elerch/quickstart-taskcat-ci/raw/main/assets/cfn-lint-directory > ./cfn-lint-directory
                - chmod 755 ./cfn-lint-directory
            build:
              commands:
                - echo Linting templates in $templateloc if they exist
                - ./cfn-lint-directory $templateloc
      TimeoutInMinutes: 10
  StatesLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 7
  SNSFailureTopic:
    Type: AWS::SNS::Topic
  SNSSuccessTopic:
    Type: AWS::SNS::Topic
  CodeBuildStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Ref StepFunctionsRoleArn
      TracingConfiguration:
        Enabled: true
      LoggingConfiguration:
        Destinations: 
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StatesLogGroup.Arn
        IncludeExecutionData: true
        Level: ALL
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "Use CodeBuild to run tests, get test results and send a notification on failure.",
              "StartAt": "CDK Project?",
              "States": {
                "CDK Project?": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.pipeline.cdkprojectpath",
                      "IsPresent": true,
                      "Next": "CDK Synth"
                    }
                  ],
                  "Default": "Stage 1"
                },
                "CDK Synth": {
                  "Type": "Task",
                  "Resource": "arn:${AWS::Partition}:states:::codebuild:startBuild.sync",
                  "Parameters": {
                    "ProjectName": "${cfnProject}",
                    "BuildspecOverride": "specfiles/cdksynthspec.yaml"
                  },
                  "Next": "Stage 1"
                },
                "Stage 1": {
                  "Type": "Parallel",
                  "Branches": [
                    {
                      "StartAt": "Run IaC Linting",
                      "States": {
                        "Run IaC Linting": {
                          "Type": "Task",
                          "Resource": "arn:${AWS::Partition}:states:::codebuild:startBuild.sync",
                          "Parameters": {
                            "ProjectName": "${cfnProject}"
                          },
                          "ResultPath": "$.iacLintResult",
                          "End": true
                        }
                      }
                    },
                    {
                      "StartAt": "Run Compliance Check",
                      "States": {
                        "Run Compliance Check": {
                          "Type": "Task",
                          "Resource": "arn:${AWS::Partition}:states:::codebuild:startBuild.sync",
                          "Parameters": {
                            "ProjectName": "${cfnProject}",
                            "BuildspecOverride": ".cfnguardspec.yaml"
                          },
                          "ResultPath": "$.complianceCheckResult",
                          "End": true
                        }
                      }
                    }
                  ],
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.TaskFailed"
                      ],
                      "ResultPath": "$.errorInfo",
                      "Next": "Notify Failure"
                    }
                  ],
                  "Next": "Notify Success"
                },
                "Notify Success": {
                  "Type": "Task",
                  "Resource": "arn:${AWS::Partition}:states:::sns:publish",
                  "Parameters": {
                    "Subject": "Pipeline completed successfully",
                    "Message.$": "$",
                    "TopicArn": "${snsSuccessTopicArn}"
                  },
                  "End": true
                },
                "Notify Failure": {
                  "Type": "Task",
                  "Resource": "arn:${AWS::Partition}:states:::sns:publish",
                  "Parameters": {
                    "Subject": "Pipeline stage failed",
                    "Message.$": "$.errorInfo.Cause",
                    "TopicArn": "${snsFailureTopicArn}"
                  },
                  "Next": "FailureState"
                },
                "FailureState": {
                  "Type": "Fail"
                }
              }
            }
          - {snsSuccessTopicArn: !Ref SNSSuccessTopic, snsFailureTopicArn: !Ref SNSFailureTopic, cfnProject: !Ref CFNProject }
