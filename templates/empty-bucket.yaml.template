AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template empty the given S3 bucket
Parameters:
  BucketName:
    Description: Name of the S3 Bucket which needs to be emptied
    Type: String
Resources:
  CleanUpS3Bucket:
    Properties:
      DestBucket: !Ref BucketName
      ServiceToken: !GetAtt 
        - CleanUpS3BucketFunction
        - Arn
    DependsOn: CleanUpS3BucketFunction
    Type: 'AWS::CloudFormation::CustomResource'
  CleanUpS3BucketFunction:
    Properties:
      Code:
        ZipFile: |
          #!/usr/bin/env python3
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          client = boto3.client('s3')


          def delete_non_versioned_objects(bucket):
              print('Collecting data from' + bucket)
              paginator = client.get_paginator('list_objects_v2')
              result = paginator.paginate(Bucket=bucket)
              delete_objects(bucket, result)


          def delete_versioned_objects(bucket):
              print('Collecting data from' + bucket)
              paginator = client.get_paginator('list_object_versions')
              result = paginator.paginate(Bucket=bucket)
              delete_objects(bucket, result)


          def delete_objects(bucket, result):
              objects = []
              for page in result:
                  if 'Contents' in page:
                      for k in page['Contents']:
                          objects.append({'Key': k['Key']})
                  if 'Versions' in page:
                      for k in page['Versions']:
                          objects.append({'Key': k['Key'], 'VersionId': k['VersionId']})
                  if 'DeleteMarkers' in page:
                      for k in page['DeleteMarkers']:
                          version = k['VersionId']
                          key = k['Key']
                          objects.append({'Key': key, 'VersionId': version})
              print('deleting objects')
              try:
                  client.delete_objects(Bucket=bucket, Delete={'Objects': objects})
              except Exception as e:
                  logging.error('Exception deleting objects: %s' % e)
                  raise
              print('bucket emptied')


          def timeout(event, context):
              logging.error('Lambda execution has timed out, sending failure response to CloudFormation')
              logging.error('Consider increasing the Lambda execution timeout parameter in the configuration')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)


          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()

              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  if event['RequestType'] == 'Delete':
                      CheckifVersioned = client.get_bucket_versioning(Bucket=dest_bucket)
                      print(CheckifVersioned)
                      if 'Status' in CheckifVersioned:
                          print(CheckifVersioned['Status'])
                          print('This is a versioned Bucket')
                          delete_versioned_objects(dest_bucket)
                      else:
                          print('This is not a versioned bucket')
                          delete_non_versioned_objects(dest_bucket)
                  else:
                      print('Nothing to do')
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
      Description: Empty the S3 Bucket
      Handler: index.handler
      Role: !GetAtt 
        - S3CleanUpRole
        - Arn
      Runtime: python3.8
      Timeout: 240
    DependsOn: S3CleanUpRole
    Type: 'AWS::Lambda::Function'
  S3CleanUpRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:ListBucketVersions'
                  - 's3:DeleteObjectVersion'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
                Effect: Allow
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${BucketName}/*'
                  - !Sub 'arn:${AWS::Partition}:s3:::*'
            Version: 2012-10-17
          PolicyName: Empty-bucket
    Type: 'AWS::IAM::Role'
